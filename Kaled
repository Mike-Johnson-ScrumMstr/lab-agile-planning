// p5.js Kaleidoscope Sketch

// --- Configuration ---
let symmetry = 6; // Number of symmetrical slices (e.g., 6, 8, 12)
let angle; // Angle of each slice, calculated in setup()
let strokeColorHue = 0; // Initial hue for the drawing stroke
let backgroundColor = 0; // Background color (0 for black, 255 for white)
let strokeThickness = 4; // Thickness of the drawing lines

// --- Setup Function ---
// This function runs once when the sketch starts
function setup() {
  createCanvas(windowWidth, windowHeight - 50); // Create a canvas that fills most of the window
  angleMode(DEGREES); // Use degrees for rotation (0-360)
  background(backgroundColor); // Set the initial background
  angle = 360 / symmetry; // Calculate the angle for each symmetrical slice

  // Set initial stroke properties
  strokeWeight(strokeThickness);
  colorMode(HSB, 360, 100, 100, 100); // Use HSB color mode for easier hue cycling

  // Instructions Text
  let instructions = createP(
    'Click and drag to draw. Press numbers 1-9 to change symmetry. Press "C" to clear.'
  );
  instructions.style('color', 'gray');
  instructions.style('font-family', 'sans-serif');
  instructions.style('text-align', 'center');
  instructions.style('position', 'absolute');
  instructions.style('bottom', '10px');
  instructions.style('width', '100%');
  instructions.id('instructions'); // Assign an ID for potential future manipulation
}

// --- Draw Function ---
// This function runs repeatedly, creating the animation
function draw() {
  // Translate the origin (0,0) to the center of the canvas
  // This makes all rotations and scaling happen around the center
  translate(width / 2, height / 2);

  // Only draw if the mouse button is pressed
  if (mouseIsPressed) {
    // Calculate mouse coordinates relative to the new (centered) origin
    let mouseXCentered = mouseX - width / 2;
    let mouseYCentered = mouseY - height / 2;

    // Calculate previous mouse coordinates relative to the new (centered) origin
    let prevMouseXCentered = pmouseX - width / 2;
    let prevMouseYCentered = pmouseY - height / 2;

    // Update the hue for the stroke color, cycling through the spectrum
    strokeColorHue = (strokeColorHue + 1) % 360;
    stroke(strokeColorHue, 90, 90, 75); // Set stroke color (Hue, Saturation, Brightness, Alpha)

    // Loop to create each symmetrical segment
    for (let i = 0; i < symmetry; i++) {
      // Rotate the canvas for the current segment
      rotate(angle);

      // Draw a line from the previous mouse position to the current mouse position
      // These coordinates are relative to the center and will be rotated
      line(mouseXCentered, mouseYCentered, prevMouseXCentered, prevMouseYCentered);

      // --- Add reflection for more intricate patterns ---
      // Save the current transformation state (rotation)
      push();
      // Scale to reflect across the y-axis of the current segment
      // (or x-axis depending on how you visualize it after rotation)
      scale(1, -1);
      line(mouseXCentered, mouseYCentered, prevMouseXCentered, prevMouseYCentered);
      // Restore the transformation state
      pop();
    }
  }
}

// --- Event Handlers ---

// Handle key presses for user interaction
function keyPressed() {
  // If 'C' or 'c' is pressed, clear the canvas
  if (key === 'c' || key === 'C') {
    background(backgroundColor); // Redraw the background to clear previous drawings
    strokeColorHue = 0; // Reset hue cycle
  }

  // If a number key (1-9) is pressed, change the symmetry
  if (keyCode >= 49 && keyCode <= 57) { // ASCII codes for '1' through '9'
    symmetry = keyCode - 48; // Convert ASCII code to the number itself
    angle = 360 / symmetry; // Recalculate the slice angle
    background(backgroundColor); // Clear the canvas when symmetry changes
    // console.log("Symmetry changed to: " + symmetry); // For debugging
  }
}

// Adjust canvas size when the window is resized
function windowResized() {
  resizeCanvas(windowWidth, windowHeight - 50); // Adjust canvas size
  background(backgroundColor); // Clear and redraw background on resize
  // Update instructions position if needed, though absolute positioning might handle it
  select('#instructions').style('bottom', '10px');
  select('#instructions').style('width', '100%');
}
